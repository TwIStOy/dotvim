global !p
from general_snippet_helper import make_box


def name_style_switch(name):
    import re
    # detect current style
    if all([c.islower() or c == '_' for c in name]):
        # underscore case
        return "".join([p.capitalize() for p in name.split('_')])

    name = re.sub(r"([A-Z]+)([A-Z][a-z])", r'\1_\2', name)
    name = re.sub(r"([a-z\d])([A-Z])", r'\1_\2', name)
    name = name.replace("-", "_")
    return name.lower()


endglobal


snippet now "current time in second"
`date "+%Y-%m-%d %H:%M:%S"`
endsnippet

snippet modeline "vim modeline"
vim`!v ':set '. (&expandtab ? printf('et sw=%i ts=%i', &sw, &ts) : printf('noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
endsnippet

snippet uuid "Random UUID" w
`!p if not snip.c: import uuid; snip.rv = uuid.uuid4()`
endsnippet

snippet box "boxed text" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet bbox "boxed test" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet "([a-zA-Z_][\w_]+).cs" "case switch" r
`!p snip.rv = name_style_switch(match.group(1))`
endsnippet

