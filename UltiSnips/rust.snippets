snippet der "#[derive(...)]" b
#[derive(${1:Debug, Clone})]
endsnippet

snippet al "#[allow(...)]" b
#[allow(${1:dead_code})]
endsnippet

snippet cfg "#[cfg(...)]" b
#[cfg(${1:target_os = "linux"})]
endsnippet

snippet cff "#[cfg(feature = ...)]" b
#[cfg(feature = "${1:feature_name}")]
endsnippet

snippet attr "#[...]" b
#[${1:inline}]
endsnippet

snippet opt "Option<T>" b
Option<${1:i32}>${0}
endsnippet

snippet res "Result<T, E>" b
Result<${1:i32}, ${2:()}>${0}
endsnippet

snippet pc "pub(crate)" bA
pub(crate) ${0}
endsnippet

snippet fn "function definition" bw
fn ${1:function_name}(${2}) ${3} {
  ${0}
}
endsnippet

snippet pfn "public function definition" bw
pub fn ${1:function_name}(${2}) ${3} {
  ${0}
}
endsnippet

snippet afn "async function definition" bw
async fn ${1:function_name}(${2}) ${3} {
  ${0}
}
endsnippet

snippet ifo "if let Ok(...)" bw
if let Ok($1) = ${1:foo} {
  ${0}
}
endsnippet

snippet ifs "if let Some(...)" bw
if let Some($1) = ${1:foo} {
  ${0}
}
endsnippet

snippet mo "match option { ... }" b
match ${1:foo} {
	Some($1) => $1,
	None => (),
}
endsnippet

snippet mr "match result { ... }" b
match ${1:foo} {
	Ok($1) => $1,
	Err(e) => {
	  info!("error: {e}");
		return;
	},
}
endsnippet

snippet ue "if let Err(e) = ..." bw
if let Err(e) = ${1:object} {
	${2:println!("{}", e)}
}
let $1 = unsafe { $1.unwrap_unchecked() };
endsnippet

snippet us "if let Some(...)" bw
if ${1:object}.is_none() {
	${2:// do nothing...}
}
let $1 = unsafe { $1.unwrap_unchecked() };
endsnippet

snippet fmt "format!(...)" bw
format!("{:?}", ${1:obj});
endsnippet

snippet pdb "println! dbg obj" bw
println!("$1 = {:?}", ${1:obj});
endsnippet

snippet pln "println!(...)" bw
println!("{:?}", ${1:foo});
endsnippet

snippet todo "TODO comments" b
// TODO(hawtian): ${0}
endsnippet

snippet fixme "FIXME comments" b
// FIXME(hawtian): ${0}
endsnippet

snippet testfn "#[test] fn" b
#[test]
fn test_${1:foo}() {
	${0}
}
endsnippet

snippet testm "test module" b
#[cfg(test)]
mod tests {
  use super::*;

	#[test]
	fn test_works() {
	  println!("works");
	}
}
endsnippet

snippet chan "tokio.channel" w
let (${1:tx}, ${2:rx}} = tokio::sync::mpsc::channel(${3:128});
endsnippet

snippet uchan "tokio.unbounded_channel" w
let (${1:tx}, ${2:rx}} = tokio::sync::mpsc::unbounded_channel();
endsnippet

